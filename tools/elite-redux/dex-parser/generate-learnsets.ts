import { DexParser } from "./dex-parser";
import { TypescriptFileGenerator, writeFileData } from "./generator-utils";

const config = {
	outputFile: "./learnset-output.ts",
};

const fileHeader = `import { ModdedLearnsetData } from "./sim/dex-species";

/*
 * DO NOT EDIT THIS FILE. 
 * This file was auto-generated by {server}/tools/elite-redux/dex-parser/generate-learnsets.ts
 */
`;

async function main() {
	const parser = new DexParser();
	await parser.init();
	const fileData: string[] = [fileHeader];
	fileData.push(
		`export const Learnsets: {[k: string]: ModdedLearnsetData} = ${JSON.stringify(
			parser.learnsets,
			null,
			4
		)}`
	);
	await writeFileData(config.outputFile, fileData);
	// const generator = new TypescriptFileGenerator(config.outputFile, fileHeader);
	// generator.indent();
	// generator.indent();

	// for (const speciesId of Object.keys(parser.learnsets)) {
	// 	if (speciesId === "??????????") continue;

	// 	const data = parser.learnsets[speciesId];
	// 	if (data == null) continue;
	// 	const learnset = {
	// 		learnset: data,
	// 		inherit: true,
	// 	};
	// 	generator.addObjectProperty(speciesId, learnset);

	// 	// for (const entry of Object.entries(data)) {
	// 	// 	const moveId = entry[0];
	// 	// 	const moves = entry[1];
	// 	// 	generator.addArrayProperty(moveId, moves);
	// 	// }

	// 	// generator.endObjectDefinition();
	// 	// generator.addProperty("inherit", true);
	// 	// generator.endObjectDefinition();
	// }

	// generator.endObjectDefinition();
	// await generator.save();
	console.debug(`Successfully wrote learnset data to ${config.outputFile}`);
}

main().then(() => process.exit(0));
